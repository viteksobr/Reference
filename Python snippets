Python code repo - useful snippets to be reused

# Read and write csv/json files

pd.read_csv('path/file.csv')
df.to_csv('path/file2.csv')

pd.read_json('file.json')
df.to_json('path/file.csv')
--

# Shape of data frame

df.info()
--

# Select top/bottom rows

# top 2 rows
df[:]2
df.head(2)

# bottom 2
df.tail(2)
--

# Summary stats

df.describe()
--

# Replace strings

# no replaced by nothing
df.replace('no', '')
--

# Change string to date type

# format 2020-01-31
df['date_col_name'] = pd.to_datetime(df['date_col_name'], 
                        format='Y%m%d')
--

# See cols with non-unique values and which ones

for col in df.columns:
    print(col, df[col].nunique(), len(df))
--

# Dropping cols

df.drop(['col_name']), axis=1, inplace=True
--

# Cleaning up strings

# mapping wrong values to correct ones
diversity_map = {1: 'yes', 0: 'no'}
termd_map = {1: 'yes', 0: 'no'}
hispanic_latino_map = {'No': 'no', 'Yes': 'yes', 'no': 'no', 'yes': 'yes'}
df['FromDiversityJobFairID'].replace(diversity_map, inplace=True)
df['Termd'].replace(termd_map, inplace=True)
df['HispanicLatino'].replace(hispanic_latino_map, inplace=True)

# removing trailing spaces
df['Position'] = df['Position'].str.strip()
df['Department'] = df['Department'].str.strip()
--

# Show all columns

df.columns
--

# Rename column names

new_col_names = {'old_col_name': 'new_col_name', 'old_col_name2': 'new_col_name2'}

df = df.rename(columns=new_col_names)
--

# Group by simple

df.groupby('col_name').mean() # or sum, min, man, count, median
--

# Select column

df['col_name']
--

# Filtering

df.query('col_name>100')

# while selecting columns
df.loc[df.col_name > 100, ['col_name2', 'col_name3']]

df[(df.col_name > 10 & (df['col_name2] > 2)]
--

# Pivot table

df.pivot_table(index='col_name', values='col_name2', aggfunc=max)
--

# Fill NA

# fill with 0
df.fillna(0)

# fill forward with previous value
df.fillna(method='ffill') # bfill for next value
--

# Melt

pd.melt(df, id_vars=["first","last"])
--

# Find differences in two lists
def difference(a, b):
    set_a = set(a)
    set_b = set(b)
    comparison = set_a.difference(set_b)
    return list(comparison)


difference([1,2,3], [1,2,4]) # [3]
--

# API call with OAuth
## API keys look like:
consumer_key='aaaaBBBBBaaaaaaBBBBBBaaaaaBBBBBB'
consumer_secret='aaaBBBBBaaaaaBBBBBaaaaaaBBBBBBBaaaaaaBBBBBBBB'
access_token='ddddddddd-xxxXXxxXXXXXxxxxxXXXXxxxxxXXXXXxxxxxxxxx'
access_token_secret ='XXxxXXXXXxxxXXXxxXXXXxxxxxXXXXXxxxxxxxxx'
## Define user name
user='@datasciencectrl'
## Defining extract_twitter_data function which extracts data of twitter user
def extract_twitter_data(user):

    # Create authentication token
    # for more details visit the following webpage: http://tweepy.readthedocs.org/en/v2.3.0/auth_tutorial.html#auth-tut...
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_token, access_token_secret)

    ## Call the API and get data from twitter user
    api = tweepy.API(auth)
    twitterData = api.get_user(user)
    --
    
